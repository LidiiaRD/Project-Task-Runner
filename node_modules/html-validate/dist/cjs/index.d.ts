import { z as Report, c as ConfigLoader, H as HtmlValidate, a as ConfigData } from './core.js';
export { e as Attribute, A as AttributeData, aa as AttributeEvent, g as CSSStyleDeclaration, an as CompatibilityOptions, ac as ConditionalEvent, C as Config, b as ConfigError, a1 as ConfigReadyEvent, af as DOMLoadEvent, ag as DOMReadyEvent, I as DeferredMessage, ad as DirectiveEvent, ae as DoctypeEvent, D as DynamicValue, a9 as ElementReadyEvent, a0 as Event, $ as EventCallback, E as EventDump, _ as EventHandler, aj as FileSystemConfigLoader, ak as Formatter, f as HtmlElement, ai as ListenEventMap, L as Location, F as Message, m as MetaAttribute, n as MetaAttributeAllowedCallback, q as MetaCopyableProperty, M as MetaData, k as MetaDataTable, l as MetaElement, o as MetaTable, j as NestedError, N as NodeClosed, Y as Parser, Q as Plugin, P as ProcessAttributeCallback, w as ProcessElementCallback, x as ProcessElementContext, B as Reporter, G as Result, R as Rule, r as RuleConstructor, s as RuleDocumentation, i as SchemaValidationError, V as SchemaValidationPatch, S as Severity, t as Source, u as SourceHooks, a2 as SourceReadyEvent, d as StaticConfigLoader, a7 as TagCloseEvent, a6 as TagEndEvent, a5 as TagOpenEvent, a8 as TagReadyEvent, a4 as TagStartEvent, O as TemplateExtractor, T as TextNode, h as TokenDump, a3 as TokenEvent, J as TransformContext, K as Transformer, ah as TriggerEventMap, U as UserError, ab as WhitespaceEvent, W as WrappedError, am as compatibilityCheck, p as configPresets, X as definePlugin, al as formatterFactory, Z as ruleExists, y as sliceLocation, v as version } from './core.js';
export { d as defineMetadata, m as metadataHelper } from './meta-helper.js';
export { I as IncludeExcludeOptions, T as TextClassification, c as classifyNodeText, k as keywordPatternMatcher } from './rules-helper.js';
export { SchemaObject } from 'ajv';

interface ExpandOptions {
    /**
     * Working directory. Defaults to `process.cwd()`.
     */
    cwd?: string;
    /**
     * List of extensions to search for when expanding directories. Extensions
     * should be passed without leading dot, e.g. "html" instead of ".html".
     */
    extensions?: string[];
}

interface InitResult {
    filename: string;
}

interface CLIOptions {
    configFile?: string;
    rules?: string | string[];
}
/**
 * @public
 */
declare class CLI {
    private options;
    private config;
    private loader;
    private ignored;
    /**
     * Create new CLI helper.
     *
     * Can be used to create tooling with similar properties to bundled CLI
     * script.
     */
    constructor(options?: CLIOptions);
    /**
     * Returns list of files matching patterns and are not ignored. Filenames will
     * have absolute paths.
     *
     * @public
     */
    expandFiles(patterns: string[], options?: ExpandOptions): string[];
    getFormatter(formatters: string): (report: Report) => string;
    /**
     * Initialize project with a new configuration.
     *
     * A new `.htmlvalidate.json` file will be placed in the path provided by
     * `cwd`.
     */
    init(cwd: string): Promise<InitResult>;
    /**
     * Searches ".htmlvalidateignore" files from filesystem and returns `true` if
     * one of them contains a pattern matching given filename.
     */
    isIgnored(filename: string): boolean;
    /**
     * Clear cache.
     *
     * Previously fetched [[HtmlValidate]] instances must either be fetched again
     * or call [[HtmlValidate.flushConfigCache]].
     */
    clearCache(): void;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @internal
     */
    getLoader(): ConfigLoader;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @public
     */
    getValidator(): HtmlValidate;
    /**
     * @internal
     */
    getConfig(): ConfigData;
}

export { CLI, ConfigData, ConfigLoader, HtmlValidate, Report };
